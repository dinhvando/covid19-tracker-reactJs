{"version":3,"sources":["components/InfoBox.js","assets/img/WHO.jpg","assets/img/BoYTe.png","components/LineGraph.js","components/Map.js","components/Table.js","store/country.js","store/Map.js","App.js","utils.js","store/index.js","index.js"],"names":["useInfoBoxStyles","makeStyles","cardRoot","width","textAlign","cursor","title","textTransform","InfoBox","cases","total","onCLick","InfoBoxStyles","Card","raised","className","CardContent","Typography","variant","numeral","format","LineGraph","React","memo","data","color","recovered","deaths","caseType","getData","finalRes","i","length","chartDataRes","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","labels","map","datasets","parseInt","label","borderColor","fill","backgroundColor","casesTypeColors","hex","mulitiplier","Map","countries","casesType","center","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","attribution","url","country","index","Circle","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","name","useTableStyle","tableCell","fontSize","countryInfo","image","height","marginRight","position","top","RankingTable","tableData","tableStyles","Table","tableContent","TableHead","TableRow","TableCell","clsx","align","TableBody","alt","src","historyURL","fetchCountry","createAsyncThunk","a","axios","get","item","todayCases","todayDeaths","todayRecovered","fetchGlobalData","fetchHistoryCountryData","currentCountry","timeline","Error","countrySlice","createSlice","initialState","globalData","historyData","reducers","changeCountry","state","action","payload","extraReducers","fulfilled","actions","mapSlice","mapCenter","mapZoom","changeCaseType","setCenter","Container","styled","div","Title","h1","MiddleImageList","MiddleImage","img","App","dispatch","useDispatch","countryList","useSelector","currentCountryInfo","find","useEffect","console","log","WHO","BoYTe","FormControl","minWidth","Select","value","onChange","e","target","MenuItem","classNames","sort","b","store","configureStore","reducer","countryReducer","Mapreducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76fed48a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport numeral from 'numeral';\r\nimport  './InfoBox.css'\r\nconst useInfoBoxStyles = makeStyles(()=>{\r\n    return{\r\n        cardRoot:{\r\n            width: \"30%\",\r\n            textAlign: \"center\",\r\n            cursor: \"pointer\"\r\n        },\r\n        title:{\r\n            textTransform: \"uppercase\"\r\n        }\r\n    }\r\n})\r\nexport const InfoBox = ({title, cases, total,onCLick})=>{\r\n    const InfoBoxStyles = useInfoBoxStyles();\r\n    return(\r\n        <Card raised className={`${InfoBoxStyles.cardRoot} cardItem--${title}`} onCLick={onCLick}>\r\n            <CardContent>\r\n                <Typography className={InfoBoxStyles.title} variant=\"h5\">{title}</Typography>\r\n                <Typography variant=\"h5\">+ {numeral(cases).format(\"0,0\")}</Typography>\r\n                <Typography variant=\"h6\">Total: {numeral(total).format(\"0,0\")}</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n    \r\n} ","export default __webpack_public_path__ + \"static/media/WHO.26424de7.jpg\";","export default __webpack_public_path__ + \"static/media/BoYTe.00f3eb67.png\";","import React,{useState,useEffect} from 'react'\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport {fetchCountryMonthlyData} from '../api/index'\r\nimport numeral from 'numeral'\r\n\r\n\r\n\r\nexport const LineGraph = React.memo(({ data}) => {\r\n\r\n\r\n    const color = {\r\n        cases: 'rgba(0,0,255,0.5)',\r\n        recovered: 'rgba(0,255,0,0.5)',\r\n        deaths: 'rgba(255,0,0,0.5)',\r\n    }\r\n    const caseType = ['cases','recovered','deaths']\r\n    const buildChartData = () => {\r\n        const finalRes = [];\r\n        for(let i = 0; i < caseType.length; i++) {\r\n            const chartDataRes = [];\r\n            let lastDataPoint;\r\n            for (let date in data[caseType[i]]) {\r\n                if(lastDataPoint){\r\n                    const newDataPoint = {\r\n                        x: date,\r\n                        y: data[caseType[i]][date] - lastDataPoint\r\n                    }\r\n                    chartDataRes.push(newDataPoint);\r\n                }\r\n                lastDataPoint = data[caseType[i]][date] \r\n            }\r\n            finalRes.push(chartDataRes);\r\n        }\r\n      \r\n       return finalRes;\r\n    }\r\n    \r\n    const options = {\r\n        legend: {\r\n           \r\n            labels:{\r\n                font:{\r\n                    size: 20\r\n                }\r\n            }\r\n        },\r\n        elements: {\r\n            point: {\r\n                radius: 0\r\n            },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n            mode: 'index',\r\n            intersect: false,\r\n            callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                    return numeral(tooltipItem.value).format('+0,0');\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    type: 'time',\r\n                    time: {\r\n                        format: 'MM/DD/YY',\r\n                        tooltipFormat: 'll',\r\n                    },\r\n                },\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    ticks: {\r\n                        callback: function (value, index, values) {\r\n                            return numeral(value).format(\"0.0a\");\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    const getData = buildChartData();\r\n    return (\r\n        <>\r\n            {getData.length !== 0 &&\r\n                (<Line \r\n                    data={{\r\n                        labels: getData[0].map(({ x }) => x),\r\n                        datasets: [\r\n                            {\r\n                                data: getData[0].map(({ y }) => parseInt(y)),\r\n                                label: caseType[0],\r\n                                borderColor: color[caseType[0]],\r\n                                fill: false,\r\n                                backgroundColor: color[caseType[0]],\r\n                            },\r\n                            {\r\n                                data: getData[1].map(({ y }) => parseInt(y)),\r\n                                label: caseType[1],\r\n                                borderColor: color[caseType[1]],\r\n                                fill: false,\r\n                                backgroundColor: color[caseType[1]],\r\n                            },\r\n                            {\r\n                                data: getData[2].map(({ y }) => parseInt(y)),\r\n                                label: caseType[2],\r\n                                borderColor: color[caseType[2]],\r\n                                fill: false,\r\n                                backgroundColor: color[caseType[2]],\r\n                            }\r\n\r\n\r\n                        ]\r\n                    }}\r\n                />)\r\n\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport { Circle, MapContainer, Popup, TileLayer, useMap } from 'react-leaflet';\r\n\r\nimport numeral from 'numeral';\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      mulitiplier: 800,\r\n    }, \r\n    recovered: {\r\n      hex: \"#7DD71D\",\r\n      mulitiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#1f1d1d\",\r\n      mulitiplier: 2000,\r\n    },\r\n};\r\nexport const Map = ({countries, casesType, center, zoom}) => {\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n    return(\r\n       <div className=\"map\">\r\n           <MapContainer >\r\n           <ChangeView center={center} zoom={zoom} />\r\n           <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n              {countries.map((country,index) => (\r\n                    <Circle\r\n                    key={index}\r\n                    center={[country.lat, country.long]}\r\n                    fillOpacity={0.4}\r\n                    pathOptions={{\r\n                      color: casesTypeColors[casesType].hex,\r\n                      fillColor: casesTypeColors[casesType].hex,\r\n                    }}\r\n                    radius={\r\n                      Math.sqrt(country[casesType] / 10) * casesTypeColors[casesType].mulitiplier\r\n                    }\r\n                    >\r\n                        <Popup>\r\n                            <div className=\"info-container\">\r\n                                <div\r\n                                    className=\"info-flag\"\r\n                                    style={{ backgroundImage: `url(${country.flag})` }}\r\n                                />\r\n                                <div className=\"info-name\">{country.name}</div>\r\n                                <div className=\"info-confirmed\">\r\n                                    Cases: {numeral(country.cases).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-recovered\">\r\n                                    Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-deaths\">\r\n                                    Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                                </div>\r\n                            </div>\r\n                        </Popup>\r\n                    </Circle>\r\n                ))}\r\n           </MapContainer>\r\n       </div>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport {Table,TableBody,TableCell,TableContainer,TableHead,TableRow} from '@material-ui/core';\r\nimport numeral from 'numeral'\r\nconst useTableStyle = makeStyles(()=>{\r\n    return{\r\n        tableCell: {\r\n            fontSize: 18,\r\n\r\n        },\r\n        countryInfo:{\r\n           \r\n        },\r\n        image:{\r\n            width:40,\r\n            height:\"auto\",\r\n            marginRight: 4,\r\n            position: \"relative\",\r\n            top: 5\r\n        }\r\n    }\r\n})\r\nexport const RankingTable = ({tableData}) => {\r\n    const tableStyles = useTableStyle();\r\n    return(\r\n        <Table className={tableStyles.tableContent}>\r\n            <TableHead>\r\n          <TableRow>\r\n            <TableCell className={tableStyles.tableCell}>#</TableCell>\r\n            <TableCell className={clsx(tableStyles.tableCell )} align=\"left\">Country</TableCell>\r\n            <TableCell className={tableStyles.tableCell} align=\"left\">Number of Cases</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            {tableData.map(({name,flag,cases},index)=>(\r\n                <TableRow key = {index}>\r\n                    <TableCell className={tableStyles.tableCell} align=\"left\">{index + 1}</TableCell>\r\n                    <TableCell  className={clsx(tableStyles.tableCell,tableStyles.countryInfo)} align=\"left\"><img className={tableStyles.image} alt={name} src={flag}/> {name} </TableCell>\r\n                    <TableCell  className={tableStyles.tableCell} align=\"left\">{numeral(cases).format(\"0,0\")}</TableCell>    \r\n                </TableRow>\r\n            ))}\r\n        </TableBody>\r\n        </Table>\r\n    )\r\n}","import React from 'react'\r\nimport axios from 'axios';\r\nimport {createSlice,createAsyncThunk} from '@reduxjs/toolkit'\r\nconst countriesURL = 'https://disease.sh/v3/covid-19/countries';\r\nconst allURL = 'https://disease.sh/v3/covid-19/all';\r\nconst historyURL = 'https://disease.sh/v3/covid-19/historical';\r\nexport const fetchCountry = createAsyncThunk(\r\n    'fectchCountry',\r\n    async () => {\r\n        const {data} = await axios.get(countriesURL);\r\n        const countryInfo = data.map((item) => {\r\n            return {\r\n                name: item.country,\r\n                flag: item.countryInfo.flag,\r\n                cases: item.cases,\r\n                todayCases: item.todayCases,\r\n                deaths: item.deaths,\r\n                todayDeaths: item.todayDeaths,\r\n                recovered: item.recovered,\r\n                todayRecovered: item.todayRecovered,\r\n                long: item.countryInfo.long,\r\n                lat: item.countryInfo.lat\r\n            }\r\n        })\r\n        return countryInfo;\r\n    }\r\n)\r\nexport const fetchGlobalData = createAsyncThunk(\r\n    'fetchGlobalData',\r\n    async () => {\r\n        const {data} = await axios.get(allURL);\r\n        return {\r\n            cases: data.cases,\r\n            todayCases: data.todayCases,\r\n            deaths: data.deaths,\r\n            todayDeaths: data.todayDeaths,\r\n            recovered: data.recovered,\r\n            todayRecovered: data.todayRecovered\r\n        }\r\n    }\r\n)\r\nexport const fetchHistoryCountryData = createAsyncThunk(\r\n    'fetchHistoryCountryData',\r\n    async (currentCountry) => {\r\n        try {\r\n            const {data} = currentCountry === 'worldwide' ? await axios.get(`${historyURL}/all?lastdays=7`) :  await axios.get(`${historyURL}/${currentCountry}?lastdays=7`);\r\n            return currentCountry === 'worldwide' ? data : data.timeline\r\n        } catch (error) {\r\n            throw new Error('Country not found or doesnt have any historical data')\r\n        }\r\n\r\n    }\r\n)\r\nconst countrySlice = createSlice({\r\n    name: 'country',\r\n    initialState:{countryInfo: [],globalData : {},historyData : {}, currentCountry: 'worldwide'},\r\n    reducers:{\r\n        changeCountry(state,action){\r\n            state.currentCountry = action.payload\r\n        }\r\n    },\r\n    extraReducers:{\r\n        [fetchCountry.fulfilled]: (state, action) =>{\r\n            state.countryInfo = [...action.payload]\r\n        },\r\n        [fetchGlobalData.fulfilled]: (state,action) =>{\r\n            state.globalData = action.payload\r\n        },\r\n        [fetchHistoryCountryData.fulfilled]: (state,action) =>{\r\n            state.historyData = action.payload\r\n        }\r\n\r\n    },\r\n})\r\n\r\nexport default countrySlice.reducer\r\nexport const {changeCountry} = countrySlice.actions\r\n\r\n\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst mapSlice = createSlice({\r\n    name: 'map',\r\n    initialState: {mapCenter: [21,105.8], mapZoom: 5, caseType: 'cases'},\r\n    reducers:{\r\n        changeCaseType (state,action){\r\n            state.caseType = action.payload\r\n        },\r\n        setCenter(state,action){\r\n            state.mapCenter = action.payload\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport default mapSlice.reducer\r\nexport const {changeCaseType, setCenter} = mapSlice.actions","import React,{ useEffect} from 'react'\r\nimport './App.css';\r\nimport classNames from 'classnames';\r\n\r\nimport {InfoBox} from './components/InfoBox'\r\nimport {Card, CardContent, Typography,FormControl, Select, MenuItem} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport WHO from './assets/img/WHO.jpg'\r\nimport BoYTe from './assets/img/BoYTe.png'\r\nimport {LineGraph} from './components/LineGraph'\r\nimport {Map} from './components/Map'\r\nimport {RankingTable} from './components/Table'\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport {sortData} from './utils'\r\n// redux\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {fetchCountry} from './store/country'\r\nimport {changeCountry} from './store/country'\r\nimport {fetchGlobalData} from './store/country'\r\nimport {fetchHistoryCountryData} from './store/country'\r\nimport {changeCaseType, setCenter} from './store/Map'\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content:space-between;\r\n    margin: 10px;\r\n    align-items:center;\r\n`\r\nconst Title = styled.h1`\r\n    color: red\r\n`\r\nconst MiddleImageList = styled.div`\r\n    display: flex;\r\n    height: 80px;\r\n`\r\nconst MiddleImage = styled.img`\r\n    height: inherit;\r\n`\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const countryList = useSelector(state => state.country.countryInfo);\r\n  const currentCountry = useSelector(state => state.country.currentCountry);\r\n  const globalData = useSelector(state => state.country.globalData);\r\n  const historyData = useSelector(state => state.country.historyData);\r\n  const mapCenter = useSelector(state => state.map.mapCenter);\r\n  const mapZoom = useSelector(state => state.map.mapZoom);\r\n  const caseType = useSelector(state => state.map.caseType)\r\n  const currentCountryInfo = countryList.find(country => country.name === currentCountry);\r\n  useEffect(()=>{\r\n \r\n    dispatch(fetchCountry())\r\n    dispatch(fetchGlobalData())\r\n    dispatch(fetchHistoryCountryData(currentCountry))\r\n  },[])\r\n  useEffect(()=>{\r\n    dispatch(fetchHistoryCountryData(currentCountry))\r\n    if(currentCountry !== 'worldwide')\r\n    dispatch(setCenter([currentCountryInfo.lat, currentCountryInfo.long]))\r\n    else\r\n    dispatch(setCenter([21, 105.8]))\r\n  },[currentCountry])\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(changeCountry(e.target.value))\r\n  }\r\n  console.log(caseType)\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app__left\">\r\n      <Container>\r\n            <Title>Covid-19 Tracker</Title>\r\n            <MiddleImageList>\r\n            <MiddleImage src ={WHO}/>\r\n            <MiddleImage src ={BoYTe}/>\r\n            </MiddleImageList>\r\n            <FormControl style ={{minWidth: \"200px\"}}>\r\n                <Select style={{fontSize:\"20px\"}} variant=\"outlined\" value={currentCountry}  onChange={handleChange}>\r\n                    <MenuItem style={{fontSize:\"20px\"}} value = \"worldwide\">Worldwide</MenuItem>\r\n                   {countryList.map(({name},index) => (<MenuItem key={index} style={{fontSize:\"20px\"}}  value = {name}>{name}</MenuItem>))}\r\n                </Select>\r\n            </FormControl>\r\n        </Container>\r\n      <div className=\"app__stats\">\r\n        <InfoBox onCLick = {e => dispatch(changeCaseType('cases'))}  title = \"Infected\" cases ={currentCountry ==='worldwide' ? globalData.todayCases :  currentCountryInfo.todayCases} total={currentCountry ==='worldwide' ? globalData.cases : currentCountryInfo.cases} className={classNames('cardItem', 'cardItem--infected')}/>\r\n        <InfoBox onCLick = {e => dispatch(changeCaseType('recovered'))}   title =\"Recovered\"cases ={currentCountry ==='worldwide' ? globalData.todayRecovered :  currentCountryInfo.todayRecovered} total={currentCountry ==='worldwide' ? globalData.recovered : currentCountryInfo.recovered}/>\r\n        <InfoBox  onCLick = {e => dispatch(changeCaseType('deaths'))}  title = \"Deaths\" cases ={currentCountry ==='worldwide' ? globalData.todayDeaths :  currentCountryInfo.todayDeaths} total={currentCountry ==='worldwide' ? globalData.deaths : currentCountryInfo.deaths}/>\r\n      </div>\r\n      <div className=\"app__chart\" >\r\n        <LineGraph data={historyData} />\r\n      </div>\r\n\r\n      <Map countries={countryList} casesType={caseType} center={mapCenter} zoom={mapZoom}/>\r\n      </div>\r\n        <Card className=\"app__right\">\r\n              <div className=\"table__content\">\r\n                <h1>Live Cases by Country</h1>\r\n                <RankingTable tableData={ sortData(countryList)}/>\r\n              </div>\r\n        </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b) => {\r\n        return b.cases - a.cases;\r\n    })\r\n}","import {configureStore} from '@reduxjs/toolkit'\r\nimport countryReducer from './country'\r\nimport Mapreducer from './Map'\r\nconst store = configureStore({\r\n    reducer: {country: countryReducer, map: Mapreducer}\r\n}\r\n)\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/index'\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}